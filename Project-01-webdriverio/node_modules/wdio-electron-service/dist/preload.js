import { contextBridge, ipcRenderer } from 'electron';
const validChannels = [
    'wdio-electron',
    'wdio-electron.app',
    'wdio-electron.mainProcess',
    'wdio-electron.browserWindow',
];
const invoke = async (channel, ...data) => {
    if (!validChannels.includes(channel)) {
        throw new Error(`Channel "${channel}" is invalid`);
    }
    if (!process.env.WDIO_ELECTRON) {
        throw new Error('Electron APIs can not be invoked outside of WDIO');
    }
    return ipcRenderer.invoke(channel, data);
};
contextBridge.exposeInMainWorld('wdioElectron', {
    custom: {
        invoke: (...args) => invoke('wdio-electron', ...args),
    },
    mainProcess: {
        invoke: (funcName, ...args) => invoke('wdio-electron.mainProcess', funcName, ...args),
    },
    app: {
        invoke: (funcName, ...args) => invoke('wdio-electron.app', funcName, ...args),
    },
    browserWindow: {
        invoke: (funcName, ...args) => invoke('wdio-electron.browserWindow', funcName, ...args),
    },
});
//# sourceMappingURL=preload.js.map