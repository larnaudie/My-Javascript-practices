{"version":3,"file":"preload.js","sourceRoot":"","sources":["../src/preload.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,aAAa,EAAE,WAAW,EAAE,MAAM,UAAU,CAAC;AAEtD,MAAM,aAAa,GAAG;IACpB,eAAe;IACf,mBAAmB;IACnB,2BAA2B;IAC3B,6BAA6B;CAC9B,CAAC;AAEF,MAAM,MAAM,GAAG,KAAK,EAAE,OAAe,EAAE,GAAG,IAAe,EAAE,EAAE;IAC3D,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE;QACpC,MAAM,IAAI,KAAK,CAAC,YAAY,OAAO,cAAc,CAAC,CAAC;KACpD;IACD,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,aAAa,EAAE;QAC9B,MAAM,IAAI,KAAK,CAAC,kDAAkD,CAAC,CAAC;KACrE;IACD,OAAO,WAAW,CAAC,MAAM,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;AAC3C,CAAC,CAAC;AAEF,aAAa,CAAC,iBAAiB,CAAC,cAAc,EAAE;IAC9C,MAAM,EAAE;QACN,MAAM,EAAE,CAAC,GAAG,IAAe,EAAE,EAAE,CAAC,MAAM,CAAC,eAAe,EAAE,GAAG,IAAI,CAAC;KACjE;IACD,WAAW,EAAE;QACX,MAAM,EAAE,CAAC,QAAgB,EAAE,GAAG,IAAe,EAAE,EAAE,CAAC,MAAM,CAAC,2BAA2B,EAAE,QAAQ,EAAE,GAAG,IAAI,CAAC;KACzG;IACD,GAAG,EAAE;QACH,MAAM,EAAE,CAAC,QAAgB,EAAE,GAAG,IAAe,EAAE,EAAE,CAAC,MAAM,CAAC,mBAAmB,EAAE,QAAQ,EAAE,GAAG,IAAI,CAAC;KACjG;IACD,aAAa,EAAE;QACb,MAAM,EAAE,CAAC,QAAgB,EAAE,GAAG,IAAe,EAAE,EAAE,CAAC,MAAM,CAAC,6BAA6B,EAAE,QAAQ,EAAE,GAAG,IAAI,CAAC;KAC3G;CACF,CAAC,CAAC","sourcesContent":["import { contextBridge, ipcRenderer } from 'electron';\n\nconst validChannels = [\n  'wdio-electron',\n  'wdio-electron.app',\n  'wdio-electron.mainProcess',\n  'wdio-electron.browserWindow',\n];\n\nconst invoke = async (channel: string, ...data: unknown[]) => {\n  if (!validChannels.includes(channel)) {\n    throw new Error(`Channel \"${channel}\" is invalid`);\n  }\n  if (!process.env.WDIO_ELECTRON) {\n    throw new Error('Electron APIs can not be invoked outside of WDIO');\n  }\n  return ipcRenderer.invoke(channel, data);\n};\n\ncontextBridge.exposeInMainWorld('wdioElectron', {\n  custom: {\n    invoke: (...args: unknown[]) => invoke('wdio-electron', ...args),\n  },\n  mainProcess: {\n    invoke: (funcName: string, ...args: unknown[]) => invoke('wdio-electron.mainProcess', funcName, ...args),\n  },\n  app: {\n    invoke: (funcName: string, ...args: unknown[]) => invoke('wdio-electron.app', funcName, ...args),\n  },\n  browserWindow: {\n    invoke: (funcName: string, ...args: unknown[]) => invoke('wdio-electron.browserWindow', funcName, ...args),\n  },\n});\n"]}