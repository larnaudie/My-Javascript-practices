{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/cjs/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAIA,OAAO,CAAC,OAAO,GAAG,MAAM,kBAAkB;IAGxC,YAAY,OAA+B;QACzC,CAAC,KAAK,IAAI,EAAE;YACV,MAAM,EAAE,OAAO,EAAE,eAAe,EAAE,GAAG,wDAAa,eAAe,GAAC,CAAC;YACnE,IAAI,CAAC,QAAQ,GAAG,IAAI,eAAe,CAAC,OAAO,CAAC,CAAC;QAC/C,CAAC,CAAC,EAAE,CAAC;IACP,CAAC;IAED,KAAK,CAAC,aAAa,CAAC,MAAgD,EAAE,YAAuC;QAC3G,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC;QACrC,OAAO,QAAQ,EAAE,aAAa,CAAC,MAAM,EAAE,YAAY,CAAC,CAAC;IACvD,CAAC;IAED,KAAK,CAAC,MAAM,CAAC,YAAuC,EAAE,KAAe,EAAE,OAA4B;QACjG,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC;QACrC,OAAO,QAAQ,EAAE,MAAM,CAAC,YAAY,EAAE,KAAK,EAAE,OAAO,CAAC,CAAC;IACxD,CAAC;CACF,CAAC;AAEF,OAAO,CAAC,QAAQ,GAAG,MAAM,0BAA0B;IAGjD,YACE,OAAoC,EACpC,YAAuC,EACvC,MAA0B;QAE1B,CAAC,KAAK,IAAI,EAAE;YACV,MAAM,EAAE,OAAO,EAAE,uBAAuB,EAAE,GAAG,wDAAa,gBAAgB,GAAC,CAAC;YAC5E,IAAI,CAAC,QAAQ,GAAG,IAAI,uBAAuB,CAAC,OAAO,EAAE,YAAY,EAAE,MAAM,CAAC,CAAC;QAC7E,CAAC,CAAC,EAAE,CAAC;IACP,CAAC;IAED,KAAK,CAAC,SAAS;QACb,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC;QACrC,OAAO,QAAQ,EAAE,SAAS,EAAE,CAAC;IAC/B,CAAC;IAED,KAAK,CAAC,UAAU;QACd,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC;QACrC,OAAO,QAAQ,EAAE,UAAU,EAAE,CAAC;IAChC,CAAC;CACF,CAAC","sourcesContent":["import type { Capabilities, Options, Services } from '@wdio/types';\nimport type { default as LauncherInstance, ElectronLauncherServiceOpts } from '../launcher.js';\nimport type { default as ServiceInstance } from '../service.js';\n\nexports.default = class CJSElectronService {\n  private instance?: ServiceInstance;\n\n  constructor(options: Services.ServiceOption) {\n    (async () => {\n      const { default: ElectronService } = await import('../service.js');\n      this.instance = new ElectronService(options);\n    })();\n  }\n\n  async beforeSession(config: Omit<Options.Testrunner, 'capabilities'>, capabilities: Capabilities.Capabilities) {\n    const instance = await this.instance;\n    return instance?.beforeSession(config, capabilities);\n  }\n\n  async before(capabilities: Capabilities.Capabilities, specs: string[], browser: WebdriverIO.Browser) {\n    const instance = await this.instance;\n    return instance?.before(capabilities, specs, browser);\n  }\n};\n\nexports.launcher = class CJSElectronServiceLauncher {\n  private instance?: LauncherInstance;\n\n  constructor(\n    options: ElectronLauncherServiceOpts,\n    capabilities: Capabilities.Capabilities,\n    config: Options.Testrunner,\n  ) {\n    (async () => {\n      const { default: ElectronServiceLauncher } = await import('../launcher.js');\n      this.instance = new ElectronServiceLauncher(options, capabilities, config);\n    })();\n  }\n\n  async onPrepare() {\n    const instance = await this.instance;\n    return instance?.onPrepare();\n  }\n\n  async onComplete() {\n    const instance = await this.instance;\n    return instance?.onComplete();\n  }\n};\n"]}