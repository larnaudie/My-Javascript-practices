{"version":3,"file":"launcher.js","sourceRoot":"","sources":["../src/launcher.ts"],"names":[],"mappings":"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","sourcesContent":["import { join, extname } from 'path';\nimport { promises as fs } from 'fs';\nimport { Capabilities, Options } from '@wdio/types';\nimport extractZip from 'extract-zip';\nimport { downloadArtifact as downloadElectronAssets } from '@electron/get';\nimport {\n  launcher as ChromedriverServiceLauncher,\n  ServiceOptions as ChromedriverServiceOptions,\n} from 'wdio-chromedriver-service';\nimport { getDirname } from 'cross-dirname';\n\nimport { log } from './utils.js';\n\nconst dirname = getDirname();\n\nexport type ElectronLauncherServiceOpts = {\n  chromedriver?: ChromedriverServiceOptions;\n  electronVersion?: string;\n};\n\nfunction downloadAssets(version: string) {\n  const conf = {\n    version,\n    artifactName: 'chromedriver',\n    force: process.env.force_no_cache === 'true',\n    cacheRoot: process.env.electron_config_cache,\n    platform: process.env.npm_config_platform,\n    arch: process.env.npm_config_arch,\n    // rejectUnauthorized: process.env.npm_config_strict_ssl === 'true',\n    // quiet: ['info', 'verbose', 'silly', 'http'].indexOf(process.env.npm_config_loglevel) === -1\n  };\n  log.debug('chromedriver download config: ', conf);\n  return downloadElectronAssets(conf);\n}\n\nasync function attemptAssetsDownload(version = '') {\n  log.debug(`downloading Chromedriver for Electron v${version}...`);\n  try {\n    const targetFolder = join(dirname, '..', 'bin');\n    const zipPath = await downloadAssets(version);\n    log.debug('assets downloaded to ', zipPath);\n    await extractZip(zipPath, { dir: targetFolder });\n    log.debug('assets extracted');\n    const platform = process.env.npm_config_platform || process.platform;\n    if (platform !== 'win32') {\n      log.debug('setting file permissions...');\n      await fs.chmod(join(targetFolder, 'chromedriver'), 0o755);\n      log.debug('permissions set');\n    }\n  } catch (err) {\n    // check if there is a semver minor version for fallback\n    const parts = version.split('.');\n    const baseVersion = `${parts[0]}.${parts[1]}.0`;\n\n    if (baseVersion === version) {\n      log.error(`error downloading Chromedriver for Electron v${version}`);\n      log.error(err);\n      throw err;\n    }\n\n    log.warn(`error downloading Chromedriver for Electron v${version}`);\n    log.debug('falling back to minor version...');\n    await attemptAssetsDownload(baseVersion);\n  }\n}\n\nexport default class ChromeDriverLauncher extends ChromedriverServiceLauncher {\n  private electronServiceLauncherOptions;\n  private shouldDownloadChromedriver;\n\n  constructor(\n    options: ElectronLauncherServiceOpts,\n    capabilities: Capabilities.Capabilities,\n    config: Options.Testrunner,\n  ) {\n    const isWin = process.platform === 'win32';\n    const chromedriverServiceOptions = options.chromedriver || {};\n\n    log.debug('launcher received options:', options);\n    process.env.WDIO_ELECTRON = 'true';\n\n    const validChromedriverPath =\n      chromedriverServiceOptions.chromedriverCustomPath !== undefined || options.electronVersion !== undefined;\n    if (!validChromedriverPath) {\n      const invalidChromedriverOptsError = new Error(\n        'You must specify the electronVersion, or provide a chromedriverCustomPath value',\n      );\n      log.error(invalidChromedriverOptsError);\n      throw invalidChromedriverOptsError;\n    }\n\n    const shouldDownloadChromedriver =\n      options.electronVersion && (!options.chromedriver || !options.chromedriver.chromedriverCustomPath);\n\n    if (isWin) {\n      const shouldRunInNode = extname(chromedriverServiceOptions.chromedriverCustomPath || '') === '.js';\n      if (shouldRunInNode) {\n        process.env.WDIO_ELECTRON_NODE_PATH = process.execPath;\n        process.env.WDIO_ELECTRON_CHROMEDRIVER_PATH = chromedriverServiceOptions.chromedriverCustomPath;\n        chromedriverServiceOptions.chromedriverCustomPath = join(dirname, '..', 'bin', 'chromedriver.bat');\n      }\n    }\n\n    if (!chromedriverServiceOptions.chromedriverCustomPath) {\n      const chromedriverExecutable = isWin ? 'chromedriver.exe' : 'chromedriver';\n      chromedriverServiceOptions.chromedriverCustomPath = join(dirname, '..', 'bin', chromedriverExecutable);\n    }\n\n    log.debug('setting chromedriver service options:', chromedriverServiceOptions);\n    super(chromedriverServiceOptions, capabilities, config);\n    this.electronServiceLauncherOptions = options;\n    this.shouldDownloadChromedriver = shouldDownloadChromedriver;\n  }\n\n  async onPrepare() {\n    if (this.shouldDownloadChromedriver) {\n      const { electronVersion } = this.electronServiceLauncherOptions;\n      await attemptAssetsDownload(electronVersion);\n    }\n\n    return super.onPrepare();\n  }\n}\n"]}